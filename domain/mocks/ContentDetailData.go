// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "portal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ContentDetailData is an autogenerated mock type for the ContentDetailData type
type ContentDetailData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: IDDetail
func (_m *ContentDetailData) Delete(IDDetail int) bool {
	ret := _m.Called(IDDetail)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(IDDetail)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *ContentDetailData) GetAll() []domain.Detail {
	ret := _m.Called()

	var r0 []domain.Detail
	if rf, ok := ret.Get(0).(func() []domain.Detail); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Detail)
		}
	}

	return r0
}

// GetDetailID provides a mock function with given fields: DetailID
func (_m *ContentDetailData) GetDetailID(DetailID int) []domain.Detail {
	ret := _m.Called(DetailID)

	var r0 []domain.Detail
	if rf, ok := ret.Get(0).(func(int) []domain.Detail); ok {
		r0 = rf(DetailID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Detail)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: insertDetail
func (_m *ContentDetailData) Insert(insertDetail domain.Detail) domain.Detail {
	ret := _m.Called(insertDetail)

	var r0 domain.Detail
	if rf, ok := ret.Get(0).(func(domain.Detail) domain.Detail); ok {
		r0 = rf(insertDetail)
	} else {
		r0 = ret.Get(0).(domain.Detail)
	}

	return r0
}

// Update provides a mock function with given fields: IDDetail, updatedDetail
func (_m *ContentDetailData) Update(IDDetail int, updatedDetail domain.Detail) domain.Detail {
	ret := _m.Called(IDDetail, updatedDetail)

	var r0 domain.Detail
	if rf, ok := ret.Get(0).(func(int, domain.Detail) domain.Detail); ok {
		r0 = rf(IDDetail, updatedDetail)
	} else {
		r0 = ret.Get(0).(domain.Detail)
	}

	return r0
}

type mockConstructorTestingTNewContentDetailData interface {
	mock.TestingT
	Cleanup(func())
}

// NewContentDetailData creates a new instance of ContentDetailData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContentDetailData(t mockConstructorTestingTNewContentDetailData) *ContentDetailData {
	mock := &ContentDetailData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
