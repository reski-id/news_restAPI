// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "portal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ContentDetailUseCase is an autogenerated mock type for the ContentDetailUseCase type
type ContentDetailUseCase struct {
	mock.Mock
}

// AddDetail provides a mock function with given fields: ContentID, useDetail
func (_m *ContentDetailUseCase) AddDetail(ContentID int, useDetail domain.Detail) (domain.Detail, error) {
	ret := _m.Called(ContentID, useDetail)

	var r0 domain.Detail
	if rf, ok := ret.Get(0).(func(int, domain.Detail) domain.Detail); ok {
		r0 = rf(ContentID, useDetail)
	} else {
		r0 = ret.Get(0).(domain.Detail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Detail) error); ok {
		r1 = rf(ContentID, useDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelDetail provides a mock function with given fields: IDDetail
func (_m *ContentDetailUseCase) DelDetail(IDDetail int) (bool, error) {
	ret := _m.Called(IDDetail)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(IDDetail)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(IDDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllD provides a mock function with given fields:
func (_m *ContentDetailUseCase) GetAllD() ([]domain.Detail, error) {
	ret := _m.Called()

	var r0 []domain.Detail
	if rf, ok := ret.Get(0).(func() []domain.Detail); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Detail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecificDetail provides a mock function with given fields: DetailID
func (_m *ContentDetailUseCase) GetSpecificDetail(DetailID int) ([]domain.Detail, error) {
	ret := _m.Called(DetailID)

	var r0 []domain.Detail
	if rf, ok := ret.Get(0).(func(int) []domain.Detail); ok {
		r0 = rf(DetailID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Detail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(DetailID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpDetail provides a mock function with given fields: IDDetail, updateData
func (_m *ContentDetailUseCase) UpDetail(IDDetail int, updateData domain.Detail) (domain.Detail, error) {
	ret := _m.Called(IDDetail, updateData)

	var r0 domain.Detail
	if rf, ok := ret.Get(0).(func(int, domain.Detail) domain.Detail); ok {
		r0 = rf(IDDetail, updateData)
	} else {
		r0 = ret.Get(0).(domain.Detail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Detail) error); ok {
		r1 = rf(IDDetail, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewContentDetailUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewContentDetailUseCase creates a new instance of ContentDetailUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContentDetailUseCase(t mockConstructorTestingTNewContentDetailUseCase) *ContentDetailUseCase {
	mock := &ContentDetailUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
